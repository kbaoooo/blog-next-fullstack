// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ma/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ma/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum Role {
  ADMIN // Chủ blog (chỉ bạn) - full quyền
  GUEST // Khách thăm - chỉ xem, comment
  FOLLOWER // Người theo dõi - nhận notifications
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum NotificationType {
  COMMENT
  COMMENT_REPLY
  LIKE_POST
  LIKE_COMMENT
  SHARE_POST
  FOLLOW
  POST_PUBLISHED
  SYSTEM
}

enum MediaUsageType {
  COVER // Hình ảnh bìa bài viết
  CONTENT // Hình ảnh trong nội dung bài viết
  GALLERY // Hình ảnh trong thư viện
}

// ========================================
// USER MANAGEMENT
// ========================================

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  username  String     @unique
  fullName  String?
  bio       String?
  role      Role       @default(GUEST)
  status    UserStatus @default(ACTIVE)
  avatarUrl String?

  // Social & Contact
  instagramUrl String?
  facebookUrl  String?
  linkedinUrl  String?
  githubUrl    String?

  // Settings (phân biệt rõ ràng theo role trong blog cá nhân)
  emailVerified    Boolean @default(false)
  twoFactorEnabled Boolean @default(false)

  // Notification Settings cho USERS (GUEST/FOLLOWER/ADMIN)
  emailNewPosts        Boolean @default(false) // Nhận email khi có bài viết mới
  notiNewPosts         Boolean @default(true) // Nhận email khi có ai reply comment của mình
  notiCommentReplies   Boolean @default(true) // Newsletter hàng tuần
  notiLikeComment      Boolean @default(true) // Nhận thông báo khi có ai thích comment của mình
  notiSystem           Boolean @default(true) // Nhận thông báo hệ thống (bảo trì, cập nhật, v.v.)
  // Only for admin
  notiComment          Boolean @default(true) // Nhận thông báo khi có ai bình luận bài viết của mình 
  notiSharePost        Boolean @default(true) // Nhận thông báo khi có ai chia sẻ bài viết của mình
  notiLikePost         Boolean @default(true) // Nhận thông báo khi có ai thích bài viết của mình
  notiFollow           Boolean @default(true) // Nhận thông báo khi có người theo d
  browserNotifications Boolean @default(false) // Push notifications trên browser

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  follows               Follow[]          @relation("UserFollows")
  followers             Follow[]          @relation("UserFollowers")
  receivedNotifications Notification[]    @relation("NotificationRecipient") // Thông báo nhận được
  sentNotifications     Notification[]    @relation("NotificationActor") // Thông báo gây ra (optional)
  sessions              Session[]
  mediaUploads          Media[]
  postViews             PostView[]
  commentReactions      CommentReaction[]
  siteSettings          SiteSettings[]
}

// ========================================
// AUTHENTICATION & SESSIONS
// ========================================

model Session {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique // Session identifier (random string)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Device & Browser info for security
  userAgent String?
  ipAddress String?
  device    String? // "mobile", "desktop", "tablet"
  browser   String? // "chrome", "firefox", "safari"

  // Session metadata
  lastActiveAt DateTime @default(now())
  isActive     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
  @@index([isActive])
}

// ========================================
// CONTENT MANAGEMENT
// ========================================

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String  @default("#3B82F6")

  // Hierarchical structure
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // SEO
  metaTitle       String?
  metaDescription String?

  // Stats
  postCount Int     @default(0)
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@index([slug])
  @@index([parentId])
}

model Tag {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  color       String  @default("#6B7280")

  createdAt DateTime @default(now())

  posts PostTag[]

  @@index([slug])
}

model Post {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique
  content    String
  excerpt    String?
  coverImage String?
  status     PostStatus @default(DRAFT)
  featured   Boolean    @default(false)

  // Draft content (separate from published content)
  draftContent String?

  // Publishing
  publishedAt DateTime?
  scheduledAt DateTime?

  // SEO
  metaTitle       String?
  metaDescription String?
  ogImage         String?
  canonicalUrl    String?

  // Stats
  viewCount    Int @default(0)
  likeCount    Int @default(0)
  commentCount Int @default(0)

  // Reading time estimation
  readingTime Int? // in minutes

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  tags     PostTag[]
  comments Comment[]
  likes    Like[]
  views    PostView[]
  media    PostMedia[]

  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
  @@index([publishedAt])
  @@index([featured])
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  assignedAt DateTime @default(now())

  @@id([postId, tagId])
}

// ========================================
// ENGAGEMENT SYSTEM
// ========================================

model Comment {
  id      String        @id @default(cuid())
  content String
  status  CommentStatus @default(PENDING)

  // Hierarchical comments (replies)
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // Relations
  postId   String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Stats
  likeCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions CommentReaction[]

  @@index([postId])
  @@index([authorId])
  @@index([status])
  @@index([parentId])
}

model CommentReaction {
  id        String  @id @default(cuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Like {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Follow {
  id String @id @default(cuid())

  followerId  String
  follower    User   @relation("UserFollows", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// ========================================
// ANALYTICS & TRACKING
// ========================================

model PostView {
  id String @id @default(cuid())

  postId String
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Analytics data
  ipAddress String?
  userAgent String?
  referer   String?
  device    String? // mobile, desktop, tablet
  country   String?

  viewedAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
  @@index([viewedAt])
}

// ========================================
// MEDIA MANAGEMENT
// ========================================

model Media {
  id       String    @id @default(cuid())
  filename String
  url      String
  type     MediaType
  size     Int // in bytes
  mimeType String

  // Image specific
  width  Int?
  height Int?

  // Metadata
  alt         String?
  caption     String?
  description String?

  // Organization
  folder String? // for organizing files

  // Usage tracking
  used Boolean @default(false)

  // Relations
  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  createdAt DateTime @default(now())

  posts PostMedia[]

  @@index([uploadedById])
  @@index([type])
  @@index([used])
}

model PostMedia {
  id String @id @default(cuid())

  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  mediaId String
  media   Media  @relation(fields: [mediaId], references: [id])

  // Usage type in post
  usage MediaUsageType // "cover", "content", "gallery"
  order Int    @default(0)

  @@unique([postId, mediaId])
  @@index([postId])
  @@index([mediaId])
}

// ========================================
// NOTIFICATIONS
// ========================================
//
// LOGIC BLOG CÁ NHÂN:
// - ADMIN (chủ blog) nhận: FOLLOW, LIKE_POST, SHARE_POST, COMMENT, và các thông báo khác liên quan đến quản lý blog
// - USERS (guest/follower) nhận: LIKE_COMMENT (cho comment của họ), POST_PUBLISHED, SYSTEM

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  title   String
  message String
  read    Boolean          @default(false)

  // NGƯỜI NHẬN thông báo (recipient)
  recipientId String
  recipient   User   @relation("NotificationRecipient", fields: [recipientId], references: [id])

  // NGƯỜI GÂY RA thông báo (actor) - optional vì có thể là system notification
  actorId String?
  actor   User?   @relation("NotificationActor", fields: [actorId], references: [id])

  // Optional references để link tới nội dung liên quan
  postId    String?
  commentId String?

  createdAt DateTime @default(now())

  @@index([recipientId])
  @@index([actorId])
  @@index([read])
  @@index([createdAt])
  @@index([type])
}

// ========================================
// SITE CONFIGURATION
// ========================================

model SiteSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String // "string", "number", "boolean", "json"

  // Metadata
  label       String?
  description String?
  category    String? // "general", "seo", "social", "analytics"

  updatedById String?
  updatedBy   User?    @relation(fields: [updatedById], references: [id])
  updatedAt   DateTime @updatedAt

  @@index([category])
}
