// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum
// schema.prisma

enum Role {
  ADMIN
  USER
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  username  String
  bio       String?
  role      Role      @default(USER)
  avatarUrl String?
  createdAt DateTime  @default(now())
  posts     Post[]
  comments  Comment[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  coverImage  String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  draftContent String?

  viewCount Int @default(0)

  metaTitle       String?
  metaDescription String?
  ogImage         String?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  seriesId String?
  series   Series? @relation(fields: [seriesId], references: [id])

  tags     PostTag[]
  comments Comment[]
}

model Series {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  coverImage String?
  createdAt  DateTime @default(now())

  posts Post[]
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  assignedAt DateTime @default(now())

  @@id([postId, tagId]) // Composite primary key
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}
