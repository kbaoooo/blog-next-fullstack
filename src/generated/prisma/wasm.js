
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  username: 'username',
  fullName: 'fullName',
  bio: 'bio',
  role: 'role',
  status: 'status',
  avatarUrl: 'avatarUrl',
  instagramUrl: 'instagramUrl',
  facebookUrl: 'facebookUrl',
  linkedinUrl: 'linkedinUrl',
  githubUrl: 'githubUrl',
  emailVerified: 'emailVerified',
  twoFactorEnabled: 'twoFactorEnabled',
  emailNewPosts: 'emailNewPosts',
  notiNewPosts: 'notiNewPosts',
  notiCommentReplies: 'notiCommentReplies',
  notiLikeComment: 'notiLikeComment',
  notiSystem: 'notiSystem',
  notiComment: 'notiComment',
  notiSharePost: 'notiSharePost',
  notiLikePost: 'notiLikePost',
  notiFollow: 'notiFollow',
  browserNotifications: 'browserNotifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  device: 'device',
  browser: 'browser',
  lastActiveAt: 'lastActiveAt',
  isActive: 'isActive'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  parentId: 'parentId',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  postCount: 'postCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  coverImage: 'coverImage',
  status: 'status',
  featured: 'featured',
  draftContent: 'draftContent',
  publishedAt: 'publishedAt',
  scheduledAt: 'scheduledAt',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  ogImage: 'ogImage',
  canonicalUrl: 'canonicalUrl',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  readingTime: 'readingTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  categoryId: 'categoryId'
};

exports.Prisma.PostTagScalarFieldEnum = {
  postId: 'postId',
  tagId: 'tagId',
  assignedAt: 'assignedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  status: 'status',
  parentId: 'parentId',
  postId: 'postId',
  authorId: 'authorId',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentReactionScalarFieldEnum = {
  id: 'id',
  commentId: 'commentId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.PostViewScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referer: 'referer',
  device: 'device',
  country: 'country',
  viewedAt: 'viewedAt'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  url: 'url',
  type: 'type',
  size: 'size',
  mimeType: 'mimeType',
  width: 'width',
  height: 'height',
  alt: 'alt',
  caption: 'caption',
  description: 'description',
  folder: 'folder',
  used: 'used',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt'
};

exports.Prisma.PostMediaScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  mediaId: 'mediaId',
  usage: 'usage',
  order: 'order'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  recipientId: 'recipientId',
  actorId: 'actorId',
  postId: 'postId',
  commentId: 'commentId',
  createdAt: 'createdAt'
};

exports.Prisma.SiteSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  label: 'label',
  description: 'description',
  category: 'category',
  updatedById: 'updatedById',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  username: 'username',
  fullName: 'fullName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  instagramUrl: 'instagramUrl',
  facebookUrl: 'facebookUrl',
  linkedinUrl: 'linkedinUrl',
  githubUrl: 'githubUrl'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  device: 'device',
  browser: 'browser'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  parentId: 'parentId',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color'
};

exports.Prisma.PostOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  coverImage: 'coverImage',
  draftContent: 'draftContent',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  ogImage: 'ogImage',
  canonicalUrl: 'canonicalUrl',
  authorId: 'authorId',
  categoryId: 'categoryId'
};

exports.Prisma.PostTagOrderByRelevanceFieldEnum = {
  postId: 'postId',
  tagId: 'tagId'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  parentId: 'parentId',
  postId: 'postId',
  authorId: 'authorId'
};

exports.Prisma.CommentReactionOrderByRelevanceFieldEnum = {
  id: 'id',
  commentId: 'commentId',
  userId: 'userId'
};

exports.Prisma.LikeOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId'
};

exports.Prisma.FollowOrderByRelevanceFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.PostViewOrderByRelevanceFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referer: 'referer',
  device: 'device',
  country: 'country'
};

exports.Prisma.MediaOrderByRelevanceFieldEnum = {
  id: 'id',
  filename: 'filename',
  url: 'url',
  mimeType: 'mimeType',
  alt: 'alt',
  caption: 'caption',
  description: 'description',
  folder: 'folder',
  uploadedById: 'uploadedById'
};

exports.Prisma.PostMediaOrderByRelevanceFieldEnum = {
  id: 'id',
  postId: 'postId',
  mediaId: 'mediaId'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  recipientId: 'recipientId',
  actorId: 'actorId',
  postId: 'postId',
  commentId: 'commentId'
};

exports.Prisma.SiteSettingsOrderByRelevanceFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  label: 'label',
  description: 'description',
  category: 'category',
  updatedById: 'updatedById'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  GUEST: 'GUEST',
  FOLLOWER: 'FOLLOWER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  SCHEDULED: 'SCHEDULED',
  ARCHIVED: 'ARCHIVED'
};

exports.CommentStatus = exports.$Enums.CommentStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SPAM: 'SPAM'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  AUDIO: 'AUDIO'
};

exports.MediaUsageType = exports.$Enums.MediaUsageType = {
  COVER: 'COVER',
  CONTENT: 'CONTENT',
  GALLERY: 'GALLERY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  COMMENT: 'COMMENT',
  COMMENT_REPLY: 'COMMENT_REPLY',
  LIKE_POST: 'LIKE_POST',
  LIKE_COMMENT: 'LIKE_COMMENT',
  SHARE_POST: 'SHARE_POST',
  FOLLOW: 'FOLLOW',
  POST_PUBLISHED: 'POST_PUBLISHED',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Category: 'Category',
  Tag: 'Tag',
  Post: 'Post',
  PostTag: 'PostTag',
  Comment: 'Comment',
  CommentReaction: 'CommentReaction',
  Like: 'Like',
  Follow: 'Follow',
  PostView: 'PostView',
  Media: 'Media',
  PostMedia: 'PostMedia',
  Notification: 'Notification',
  SiteSettings: 'SiteSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
